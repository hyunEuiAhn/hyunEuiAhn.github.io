---
layout: post
title:  "Map"
date:   2020-06-05
excerpt: "리액트에서 사용하는 Map."
react: true
tag:
- react 
- map
comments: false
---


# 목차
* map 이란
* 사용법 및 주의


## Map 이란

리액트에서 반복되는 컴포넌트를 렌더링 할 때 사용하는 함수가 있습니다.

map() 함수는 배열을 받아와 인자로 전달된 함수를 사용하여 배열 형태의 결과를 반환해 주는 함수입니다.

map 함수의 구조는 다음과 같습니다. 

arr.map(callback, [thisArg])
* callback - 새로운 배열의 요소를 생성하는 함수

  파라미터
   - currentValue
   - index
   - array
* thisArg - callback 함수 내부에서 사용할 this 레퍼런스


---
 
ex)

배열의 각 요소를 제곱하여 새로운 배열 생성
 
{% highlight javascript %}
var numbers = [1, 2, 3, 4, 5];

var processed = numbers.map(function(num){
    return num*num;
});
{% endhighlight %}

ES6 (Arrow Function) 문법

{% highlight javascript %}
const members = [1,2,3,4,5];

const result = members.map( num => num * num);
console.log(result);
{% endhighlight %}

map 함수에 key가 존재하지 않으면 에러가 발생합니다. 
key를 사용하는 이유는 컴포넌트 배열을 렌더링 한 후 원소의 변화를 감지하기 위해서 입니다.
key가 없다면 virtualDOM을 비교하는 과정에서 리스트를 순차적으로 비교하며 변화를 감지합니다.

만약, key 값을 index로 설정하면 배열이 변경되었을 때 비효율 적이기 때문에 index를 key로 사용하는 것을 권장하지 않습니다.

filter 함수 - 특정 조건을 만족하는 원소를 분류할 수 있습니다. 

{% highlight javascript %}
const numbers = [1, 2, 3, 4, 5, 6];

const biggerThanThree = numbers.filter(number => number > 3);

// 결과: [4, 5, 6]
{% endhighlight %}

출처:

• <https://velopert.com/957>


---




